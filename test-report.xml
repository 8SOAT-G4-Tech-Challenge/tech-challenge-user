<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/home/laccurcio/workspace/tech-challenge-sso/__tests__/unit/src/adapter/driver/controllers/userController.test.ts">
    <testCase name="UserController -&gt; Test getUsers should reply 200 and list all users" duration="13"/>
    <testCase name="UserController -&gt; Test getUsers should fail to list users" duration="1"/>
    <testCase name="UserController -&gt; Test getUserById should reply 200 and return user by id" duration="2"/>
    <testCase name="UserController -&gt; Test getUserById should fail to get user by id" duration="2"/>
    <testCase name="UserController -&gt; Test getUserById should reply 404 when user is not found by id" duration="2"/>
    <testCase name="UserController -&gt; Test getUserByEmail should reply 200 and return user by email" duration="2"/>
    <testCase name="UserController -&gt; Test getUserByEmail should reply 404 when user is not found by email" duration="11"/>
    <testCase name="UserController -&gt; Test getUserByEmail should fail to get user by email" duration="1"/>
    <testCase name="UserController -&gt; Test createUser should reply 201 and create a new user" duration="2"/>
    <testCase name="UserController -&gt; Test createUser should fail to create user" duration="1"/>
    <testCase name="UserController -&gt; Test updateUser should reply 200 and update user" duration="2"/>
    <testCase name="UserController -&gt; Test updateUser should fail to update user" duration="1"/>
    <testCase name="UserController -&gt; Test deleteUser should reply 204 and delete user" duration="1"/>
    <testCase name="UserController -&gt; Test deleteUser should fail to delete user" duration="2"/>
  </file>
  <file path="/home/laccurcio/workspace/tech-challenge-sso/__tests__/unit/src/core/application/services/userService.test.ts">
    <testCase name="UserService -&gt; Test getUsers should get all users" duration="2"/>
    <testCase name="UserService -&gt; Test getUserById should get user by id" duration="2"/>
    <testCase name="UserService -&gt; Test getUserById should return null if user not found" duration="2"/>
    <testCase name="UserService -&gt; Test getUserByEmail should get user by email" duration="1"/>
    <testCase name="UserService -&gt; Test getUserByEmail should return null if user not found" duration="1"/>
    <testCase name="UserService -&gt; Test createUser should create a new user" duration="4"/>
    <testCase name="UserService -&gt; Test createUser should throw InvalidUserException if user data is invalid" duration="16"/>
    <testCase name="UserService -&gt; Test createUser should throw ZodError if password is too short" duration="3"/>
    <testCase name="UserService -&gt; Test updateUser should update user" duration="1"/>
    <testCase name="UserService -&gt; Test updateUser should throw InvalidUserException if user update data is invalid" duration="2"/>
    <testCase name="UserService -&gt; Test deleteUser should delete user" duration="1"/>
    <testCase name="UserService -&gt; Test deleteUser should throw InvalidUserException if user not found" duration="1"/>
  </file>
  <file path="/home/laccurcio/workspace/tech-challenge-sso/__tests__/unit/src/adapter/driven/infra/userRepositoryImpl.test.ts">
    <testCase name="UserRepositoryImpl -&gt; Test getUsers should get users" duration="2"/>
    <testCase name="UserRepositoryImpl -&gt; Test getUserById should get user by id" duration="1"/>
    <testCase name="UserRepositoryImpl -&gt; Test getUserById should return null if user not found" duration="1"/>
    <testCase name="UserRepositoryImpl -&gt; Test getUserByEmail should get user by email" duration="1"/>
    <testCase name="UserRepositoryImpl -&gt; Test getUserByEmail should return null if user not found" duration="1"/>
    <testCase name="UserRepositoryImpl -&gt; Test createUser should create a new user" duration="2"/>
    <testCase name="UserRepositoryImpl -&gt; Test updateUser should update user" duration="2"/>
    <testCase name="UserRepositoryImpl -&gt; Test deleteUser should delete user" duration="2"/>
  </file>
  <file path="/home/laccurcio/workspace/tech-challenge-sso/__tests__/unit/src/core/application/services/customerService.test.ts">
    <testCase name="CustomerService -&gt; Test getCustomers should return all customers" duration="2"/>
    <testCase name="CustomerService -&gt; Test getCustomerByProperty should return customers by ID" duration="2"/>
    <testCase name="CustomerService -&gt; Test getCustomerByProperty should return customers by document" duration="2"/>
    <testCase name="CustomerService -&gt; Test getCustomerByProperty should throw InvalidCustomerException" duration="14"/>
    <testCase name="CustomerService -&gt; Test createCustomer should throw InvalidCustomerException with customer already exists message" duration="3"/>
    <testCase name="CustomerService -&gt; Test createCustomer should create customer and return it" duration="4"/>
    <testCase name="CustomerService -&gt; Test deleteCustomer should throw InvalidCustomerException with customer not found" duration="1"/>
    <testCase name="CustomerService -&gt; Test deleteCustomer should delete customer" duration="1"/>
  </file>
  <file path="/home/laccurcio/workspace/tech-challenge-sso/__tests__/unit/src/adapter/driver/controllers/customerCotroller.test.ts">
    <testCase name="CustomerController -&gt; Test getCustomers should list all customers and reply 200" duration="3"/>
    <testCase name="CustomerController -&gt; Test getCustomers should fail to list all customers" duration="1"/>
    <testCase name="CustomerController -&gt; Test getCustomerByProperty should reply status 400 when not passing id and cpf" duration="1"/>
    <testCase name="CustomerController -&gt; Test getCustomerByProperty should reply status 400 when passing id and cpf" duration="1"/>
    <testCase name="CustomerController -&gt; Test getCustomerByProperty should reply status 200 when customer is found" duration="1"/>
    <testCase name="CustomerController -&gt; Test getCustomerByProperty should reply status 404 when customer is not found" duration="1"/>
    <testCase name="CustomerController -&gt; Test getCustomerByProperty should fail to get customer" duration="1"/>
    <testCase name="CustomerController -&gt; Test createCustomer should reply status 201 when customer is created" duration="1"/>
    <testCase name="CustomerController -&gt; Test createCustomer should fail to create customer" duration="11"/>
    <testCase name="CustomerController -&gt; Test deleteCustomer should reply status 200 when customer is deleted" duration="1"/>
    <testCase name="CustomerController -&gt; Test deleteCustomer should fail to delete customer" duration="1"/>
  </file>
  <file path="/home/laccurcio/workspace/tech-challenge-sso/__tests__/unit/src/core/application/services/cacheService.test.ts">
    <testCase name="CacheService -&gt; Test get should not find cache" duration="1"/>
    <testCase name="CacheService -&gt; Test get should find cache" duration="6"/>
    <testCase name="CacheService -&gt; Test get should trigger logger error" duration="5"/>
    <testCase name="CacheService -&gt; Test set should set cache" duration="2"/>
    <testCase name="CacheService -&gt; Test set should trigger logger error" duration="1"/>
    <testCase name="CacheService -&gt; Test delete should delete cache" duration="1"/>
    <testCase name="CacheService -&gt; Test delete should trigger logger error" duration="1"/>
  </file>
  <file path="/home/laccurcio/workspace/tech-challenge-sso/__tests__/unit/src/adapter/driven/infra/customerRepositoryImpl.test.ts">
    <testCase name="CustomerRepositoryImpl -&gt; Test getCustomers should get customers from cache" duration="1"/>
    <testCase name="CustomerRepositoryImpl -&gt; Test getCustomers should get customers" duration="1"/>
    <testCase name="CustomerRepositoryImpl -&gt; Test getCustomerById should get customer by ID" duration="1"/>
    <testCase name="CustomerRepositoryImpl -&gt; Test getCustomerById should get customer by CPF" duration="1"/>
    <testCase name="CustomerRepositoryImpl -&gt; Test createCustomer should get customer by CPF" duration="3"/>
    <testCase name="CustomerRepositoryImpl -&gt; Test deleteCustomer should delete customer" duration="1"/>
  </file>
</testExecutions>